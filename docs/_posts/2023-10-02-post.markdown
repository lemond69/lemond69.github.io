---
layout: page
title: Sandbox detection part 3
---

Recently, it has come to my attention that some sandboxes may actually hook `rdtsc` or any wrapper functions (including `QueryPerformanceCounter`), and cause the counters to artificially decrease whenever a `CPUID` instruction is called, to fool malware which may abuse `CPUID` to detect sandboxes. This is unacceptable, so I found a way to do it without reading any timestamps, by using multithreading.

By executing a fixed number of `CPUID` events, then in a separate thread, calling `FYL2XP1` until the `CPUID` events finish executing, we can count the number of `FYL2XP1` events that have occurred, allowing for the `CPUID`:`FYL2XP1` timing ratio to be calculated without reading the (manipulable) timestamp counter.

## Code
```c
#include <windows.h>
#include <stdio.h>
#define THRESHOLD 5.0
#define ITERATIONS 1000000
int notdone, c;
DWORD WINAPI fp(void* data) {
    while(notdone){
        for(int i=0;i<10;i++) asm(".byte 0xd9\n\t.byte 0xf9"); //FYL2XP1
        c++;
    }
    return 0;
}

int main(){
    notdone=1;
    c=0;
    HANDLE thread = CreateThread(NULL, 0, fp, NULL, 0, NULL);
    for(int i=0;i<ITERATIONS;i++) asm("push %eax\n\tpush %ebx\n\tpush %ecx\n\tpush %edx\n\txor %eax, %eax\n\t.byte 0x0f\n\t.byte 0xa2\n\tpop %edx\n\tpop %ecx\n\tpop %ebx\n\tpop %eax"); //CPUID
    notdone=0;
    WaitForSingleObject(thread, INFINITE);
    c*=10;
    double ration = ((double)c)/((double)ITERATIONS);
    printf("c=%d, ratio=%f\n", c, ration);
    if(ration > THRESHOLD) printf("SANDBOX DETECTED!!!");
    return 0;
}
```
Note that I replaced the `CPUID` and `FYL2XP1` instructions with their respective opcodes. This is to facilitate compatibility with [TCC](https://bellard.org/tcc/), which somehow possesses a significantly better linker than mingw GCC (2.0kb vs 43kb).

## Results
Running the script on various cloud sandboxes, we get these results. Note that the highest observed score is displayed for known physical machines, while lowest observed score is displayed for known sandboxes, to establish a clear score differential.
-   Wine on i7-1165G7 (all cores enabled): 0.26
-   Wine on i7-1165G7 (all cores except 1 parked): 0.24
-   Native Windows 10 on Pentium Gold 4425Y: 4.19
-   Windows 7 on KVM (1 core): 9.07
-   Windows 7 on KVM (8 cores): 9.89
-   Triage Windows 7: 6.59
-   any.run Windows 7: 48.79
-   Triage Windows 10 1703: 6.09
-   Triage Windows 10 2004: 7.23
-   VirusTotal Microsoft Sysinternals: 30.91
-   VirusTotal Jujubox: 157.27 (this is just sad)
-   VirusTotal Zenbox: 6.13

As we can see, the highest score observed on a physical machine (4.19), is significantly lower than the lowest sandbox score (6.09), with a differential of 1.90, making a clear line between sandboxes and physical machines.

While it is true that single core machines will merely use pseudo-threading, the OS scheduler seems to be able to emulate true multi-core threading pretty decently, so long as `ITERATIONS` is set to a sufficiently high value (>20000 seems to be sufficient). However, we did not have a physical single core machine to test on, as the last one was [manufactured in 2013](https://en.wikipedia.org/wiki/Single-core). If you happen to have one, please consider testing it, especially under heavy load, to see if the result is skewed significantly.

It is not recommended to lower `ITERATIONS` too much, as while it does slightly increase speed, it is not worth it as it would make the result more prone to error, and also seems to reduce differential observed. We observed a minimum differential of 1.69 when `ITERATIONS`=500000, which increased to 1.90 when `ITERATIONS`=1000000. This is mainly due to the fact that once again, more iterations means longer time, means any errors is averaged out over more accurate data.

We note that without data filtering, this method does seem to provide accuracies and differentials significantly better than the first version of this script. This is because the original script attempted to interweave `CPUID` and `FYL2XP1` instructions, instead of executing them simultaneously, making it more prone to error, especially under heavy system load. Meanwhile, this script seems to be minimally affected by heavy system load, and hence makes it more reliable, and provides a better score differential between physical machines and sandboxes. It is also possible to run this output through an activation function to get a percentage confidence on how likely it is to be a sandbox, as shown:
```c
double fscore = ((tanh(ration-THRESHOLD)+1)/2)*100;
printf("%f%% confident sandbox\n", fscore);
```

## Conclusion
As likely the last post in this series, we believe that this will be able to detect essentially every single sandbox (except type 2 hypervisors, but those are pretty much impossible to detect using VM exit timing attacks) with high accuracy. However, if anyone finds any sandboxes that score <4.5, or a physical machine that scores >4.5, please do let us know.

Code also available [here](https://github.com/lemond69/sandbox-detect)
